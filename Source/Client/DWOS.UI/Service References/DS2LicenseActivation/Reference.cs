//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DWOS.UI.DS2LicenseActivation {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationInfo", Namespace="http://schemas.datacontract.org/2004/07/DS2.AppManagement.DataInfo")]
    [System.SerializableAttribute()]
    public partial class ActivationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessfulField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorInformation {
            get {
                return this.ErrorInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorInformationField, value) != true)) {
                    this.ErrorInformationField = value;
                    this.RaisePropertyChanged("ErrorInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Successful {
            get {
                return this.SuccessfulField;
            }
            set {
                if ((this.SuccessfulField.Equals(value) != true)) {
                    this.SuccessfulField = value;
                    this.RaisePropertyChanged("Successful");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseInfo", Namespace="http://schemas.datacontract.org/2004/07/DS2.AppManagement.DataInfo")]
    [System.SerializableAttribute()]
    public partial class LicenseInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LicenseExpirationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Activations {
            get {
                return this.ActivationsField;
            }
            set {
                if ((this.ActivationsField.Equals(value) != true)) {
                    this.ActivationsField = value;
                    this.RaisePropertyChanged("Activations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyKey {
            get {
                return this.CompanyKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyKeyField, value) != true)) {
                    this.CompanyKeyField = value;
                    this.RaisePropertyChanged("CompanyKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorInformation {
            get {
                return this.ErrorInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorInformationField, value) != true)) {
                    this.ErrorInformationField = value;
                    this.RaisePropertyChanged("ErrorInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LicenseExpiration {
            get {
                return this.LicenseExpirationField;
            }
            set {
                if ((this.LicenseExpirationField.Equals(value) != true)) {
                    this.LicenseExpirationField = value;
                    this.RaisePropertyChanged("LicenseExpiration");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseGroup", Namespace="http://schemas.datacontract.org/2004/07/DS2.AppManagement")]
    public enum ReleaseGroup : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EarlyAdopter = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Beta = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VersionInfo", Namespace="http://schemas.datacontract.org/2004/07/DS2.AppManagement.DataInfo")]
    [System.SerializableAttribute()]
    public partial class VersionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReleaseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorInformation {
            get {
                return this.ErrorInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorInformationField, value) != true)) {
                    this.ErrorInformationField = value;
                    this.RaisePropertyChanged("ErrorInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReleaseDate {
            get {
                return this.ReleaseDateField;
            }
            set {
                if ((this.ReleaseDateField.Equals(value) != true)) {
                    this.ReleaseDateField = value;
                    this.RaisePropertyChanged("ReleaseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SiteInfo", Namespace="http://schemas.datacontract.org/2004/07/DS2.AppManagement")]
    [System.SerializableAttribute()]
    public partial class SiteInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FingerprintField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SiteIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fingerprint {
            get {
                return this.FingerprintField;
            }
            set {
                if ((object.ReferenceEquals(this.FingerprintField, value) != true)) {
                    this.FingerprintField = value;
                    this.RaisePropertyChanged("Fingerprint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SiteID {
            get {
                return this.SiteIDField;
            }
            set {
                if ((this.SiteIDField.Equals(value) != true)) {
                    this.SiteIDField = value;
                    this.RaisePropertyChanged("SiteID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsageStatistics", Namespace="http://schemas.datacontract.org/2004/07/DS2.AppManagement")]
    [System.SerializableAttribute()]
    public partial class UsageStatistics : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DWOS.UI.DS2LicenseActivation.UsageStat[] StasticsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StatisticsStartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StatisticsStopTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DWOS.UI.DS2LicenseActivation.UsageStat[] Stastics {
            get {
                return this.StasticsField;
            }
            set {
                if ((object.ReferenceEquals(this.StasticsField, value) != true)) {
                    this.StasticsField = value;
                    this.RaisePropertyChanged("Stastics");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StatisticsStartTime {
            get {
                return this.StatisticsStartTimeField;
            }
            set {
                if ((this.StatisticsStartTimeField.Equals(value) != true)) {
                    this.StatisticsStartTimeField = value;
                    this.RaisePropertyChanged("StatisticsStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StatisticsStopTime {
            get {
                return this.StatisticsStopTimeField;
            }
            set {
                if ((this.StatisticsStopTimeField.Equals(value) != true)) {
                    this.StatisticsStopTimeField = value;
                    this.RaisePropertyChanged("StatisticsStopTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsageStat", Namespace="http://schemas.datacontract.org/2004/07/DS2.AppManagement")]
    [System.SerializableAttribute()]
    public partial class UsageStat : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MetricField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Metric {
            get {
                return this.MetricField;
            }
            set {
                if ((object.ReferenceEquals(this.MetricField, value) != true)) {
                    this.MetricField = value;
                    this.RaisePropertyChanged("Metric");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DS2LicenseActivation.IActivationService")]
    public interface IActivationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivationService/Activate", ReplyAction="http://tempuri.org/IActivationService/ActivateResponse")]
        DWOS.UI.DS2LicenseActivation.ActivationInfo Activate(string customerKey, string siteFingerprint, string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivationService/Activate", ReplyAction="http://tempuri.org/IActivationService/ActivateResponse")]
        System.IAsyncResult BeginActivate(string customerKey, string siteFingerprint, string licenseKey, System.AsyncCallback callback, object asyncState);
        
        DWOS.UI.DS2LicenseActivation.ActivationInfo EndActivate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivationService/GetLicenseInfo", ReplyAction="http://tempuri.org/IActivationService/GetLicenseInfoResponse")]
        DWOS.UI.DS2LicenseActivation.LicenseInfo GetLicenseInfo(string customerKey, string siteFingerprint);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivationService/GetLicenseInfo", ReplyAction="http://tempuri.org/IActivationService/GetLicenseInfoResponse")]
        System.IAsyncResult BeginGetLicenseInfo(string customerKey, string siteFingerprint, System.AsyncCallback callback, object asyncState);
        
        DWOS.UI.DS2LicenseActivation.LicenseInfo EndGetLicenseInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivationService/GetLatestVersion", ReplyAction="http://tempuri.org/IActivationService/GetLatestVersionResponse")]
        DWOS.UI.DS2LicenseActivation.VersionInfo GetLatestVersion(string productID, DWOS.UI.DS2LicenseActivation.ReleaseGroup releaseGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivationService/GetLatestVersion", ReplyAction="http://tempuri.org/IActivationService/GetLatestVersionResponse")]
        System.IAsyncResult BeginGetLatestVersion(string productID, DWOS.UI.DS2LicenseActivation.ReleaseGroup releaseGroup, System.AsyncCallback callback, object asyncState);
        
        DWOS.UI.DS2LicenseActivation.VersionInfo EndGetLatestVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivationService/GetSites", ReplyAction="http://tempuri.org/IActivationService/GetSitesResponse")]
        DWOS.UI.DS2LicenseActivation.SiteInfo[] GetSites(string customerKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivationService/GetSites", ReplyAction="http://tempuri.org/IActivationService/GetSitesResponse")]
        System.IAsyncResult BeginGetSites(string customerKey, System.AsyncCallback callback, object asyncState);
        
        DWOS.UI.DS2LicenseActivation.SiteInfo[] EndGetSites(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActivationService/UpdateStats", ReplyAction="http://tempuri.org/IActivationService/UpdateStatsResponse")]
        void UpdateStats(string productID, string customerKey, DWOS.UI.DS2LicenseActivation.UsageStatistics stats);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivationService/UpdateStats", ReplyAction="http://tempuri.org/IActivationService/UpdateStatsResponse")]
        System.IAsyncResult BeginUpdateStats(string productID, string customerKey, DWOS.UI.DS2LicenseActivation.UsageStatistics stats, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateStats(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActivationServiceChannel : DWOS.UI.DS2LicenseActivation.IActivationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.UI.DS2LicenseActivation.ActivationInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.UI.DS2LicenseActivation.ActivationInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLicenseInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLicenseInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.UI.DS2LicenseActivation.LicenseInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.UI.DS2LicenseActivation.LicenseInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLatestVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLatestVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.UI.DS2LicenseActivation.VersionInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.UI.DS2LicenseActivation.VersionInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.UI.DS2LicenseActivation.SiteInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.UI.DS2LicenseActivation.SiteInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActivationServiceClient : System.ServiceModel.ClientBase<DWOS.UI.DS2LicenseActivation.IActivationService>, DWOS.UI.DS2LicenseActivation.IActivationService {
        
        private BeginOperationDelegate onBeginActivateDelegate;
        
        private EndOperationDelegate onEndActivateDelegate;
        
        private System.Threading.SendOrPostCallback onActivateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLicenseInfoDelegate;
        
        private EndOperationDelegate onEndGetLicenseInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetLicenseInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLatestVersionDelegate;
        
        private EndOperationDelegate onEndGetLatestVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetLatestVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSitesDelegate;
        
        private EndOperationDelegate onEndGetSitesDelegate;
        
        private System.Threading.SendOrPostCallback onGetSitesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateStatsDelegate;
        
        private EndOperationDelegate onEndUpdateStatsDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateStatsCompletedDelegate;
        
        public ActivationServiceClient() {
        }
        
        public ActivationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ActivationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ActivateCompletedEventArgs> ActivateCompleted;
        
        public event System.EventHandler<GetLicenseInfoCompletedEventArgs> GetLicenseInfoCompleted;
        
        public event System.EventHandler<GetLatestVersionCompletedEventArgs> GetLatestVersionCompleted;
        
        public event System.EventHandler<GetSitesCompletedEventArgs> GetSitesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateStatsCompleted;
        
        public DWOS.UI.DS2LicenseActivation.ActivationInfo Activate(string customerKey, string siteFingerprint, string licenseKey) {
            return base.Channel.Activate(customerKey, siteFingerprint, licenseKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginActivate(string customerKey, string siteFingerprint, string licenseKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginActivate(customerKey, siteFingerprint, licenseKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.UI.DS2LicenseActivation.ActivationInfo EndActivate(System.IAsyncResult result) {
            return base.Channel.EndActivate(result);
        }
        
        private System.IAsyncResult OnBeginActivate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string customerKey = ((string)(inValues[0]));
            string siteFingerprint = ((string)(inValues[1]));
            string licenseKey = ((string)(inValues[2]));
            return this.BeginActivate(customerKey, siteFingerprint, licenseKey, callback, asyncState);
        }
        
        private object[] OnEndActivate(System.IAsyncResult result) {
            DWOS.UI.DS2LicenseActivation.ActivationInfo retVal = this.EndActivate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnActivateCompleted(object state) {
            if ((this.ActivateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ActivateCompleted(this, new ActivateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ActivateAsync(string customerKey, string siteFingerprint, string licenseKey) {
            this.ActivateAsync(customerKey, siteFingerprint, licenseKey, null);
        }
        
        public void ActivateAsync(string customerKey, string siteFingerprint, string licenseKey, object userState) {
            if ((this.onBeginActivateDelegate == null)) {
                this.onBeginActivateDelegate = new BeginOperationDelegate(this.OnBeginActivate);
            }
            if ((this.onEndActivateDelegate == null)) {
                this.onEndActivateDelegate = new EndOperationDelegate(this.OnEndActivate);
            }
            if ((this.onActivateCompletedDelegate == null)) {
                this.onActivateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnActivateCompleted);
            }
            base.InvokeAsync(this.onBeginActivateDelegate, new object[] {
                        customerKey,
                        siteFingerprint,
                        licenseKey}, this.onEndActivateDelegate, this.onActivateCompletedDelegate, userState);
        }
        
        public DWOS.UI.DS2LicenseActivation.LicenseInfo GetLicenseInfo(string customerKey, string siteFingerprint) {
            return base.Channel.GetLicenseInfo(customerKey, siteFingerprint);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLicenseInfo(string customerKey, string siteFingerprint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLicenseInfo(customerKey, siteFingerprint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.UI.DS2LicenseActivation.LicenseInfo EndGetLicenseInfo(System.IAsyncResult result) {
            return base.Channel.EndGetLicenseInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetLicenseInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string customerKey = ((string)(inValues[0]));
            string siteFingerprint = ((string)(inValues[1]));
            return this.BeginGetLicenseInfo(customerKey, siteFingerprint, callback, asyncState);
        }
        
        private object[] OnEndGetLicenseInfo(System.IAsyncResult result) {
            DWOS.UI.DS2LicenseActivation.LicenseInfo retVal = this.EndGetLicenseInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLicenseInfoCompleted(object state) {
            if ((this.GetLicenseInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLicenseInfoCompleted(this, new GetLicenseInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLicenseInfoAsync(string customerKey, string siteFingerprint) {
            this.GetLicenseInfoAsync(customerKey, siteFingerprint, null);
        }
        
        public void GetLicenseInfoAsync(string customerKey, string siteFingerprint, object userState) {
            if ((this.onBeginGetLicenseInfoDelegate == null)) {
                this.onBeginGetLicenseInfoDelegate = new BeginOperationDelegate(this.OnBeginGetLicenseInfo);
            }
            if ((this.onEndGetLicenseInfoDelegate == null)) {
                this.onEndGetLicenseInfoDelegate = new EndOperationDelegate(this.OnEndGetLicenseInfo);
            }
            if ((this.onGetLicenseInfoCompletedDelegate == null)) {
                this.onGetLicenseInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLicenseInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetLicenseInfoDelegate, new object[] {
                        customerKey,
                        siteFingerprint}, this.onEndGetLicenseInfoDelegate, this.onGetLicenseInfoCompletedDelegate, userState);
        }
        
        public DWOS.UI.DS2LicenseActivation.VersionInfo GetLatestVersion(string productID, DWOS.UI.DS2LicenseActivation.ReleaseGroup releaseGroup) {
            return base.Channel.GetLatestVersion(productID, releaseGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLatestVersion(string productID, DWOS.UI.DS2LicenseActivation.ReleaseGroup releaseGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLatestVersion(productID, releaseGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.UI.DS2LicenseActivation.VersionInfo EndGetLatestVersion(System.IAsyncResult result) {
            return base.Channel.EndGetLatestVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetLatestVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string productID = ((string)(inValues[0]));
            DWOS.UI.DS2LicenseActivation.ReleaseGroup releaseGroup = ((DWOS.UI.DS2LicenseActivation.ReleaseGroup)(inValues[1]));
            return this.BeginGetLatestVersion(productID, releaseGroup, callback, asyncState);
        }
        
        private object[] OnEndGetLatestVersion(System.IAsyncResult result) {
            DWOS.UI.DS2LicenseActivation.VersionInfo retVal = this.EndGetLatestVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLatestVersionCompleted(object state) {
            if ((this.GetLatestVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLatestVersionCompleted(this, new GetLatestVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLatestVersionAsync(string productID, DWOS.UI.DS2LicenseActivation.ReleaseGroup releaseGroup) {
            this.GetLatestVersionAsync(productID, releaseGroup, null);
        }
        
        public void GetLatestVersionAsync(string productID, DWOS.UI.DS2LicenseActivation.ReleaseGroup releaseGroup, object userState) {
            if ((this.onBeginGetLatestVersionDelegate == null)) {
                this.onBeginGetLatestVersionDelegate = new BeginOperationDelegate(this.OnBeginGetLatestVersion);
            }
            if ((this.onEndGetLatestVersionDelegate == null)) {
                this.onEndGetLatestVersionDelegate = new EndOperationDelegate(this.OnEndGetLatestVersion);
            }
            if ((this.onGetLatestVersionCompletedDelegate == null)) {
                this.onGetLatestVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLatestVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetLatestVersionDelegate, new object[] {
                        productID,
                        releaseGroup}, this.onEndGetLatestVersionDelegate, this.onGetLatestVersionCompletedDelegate, userState);
        }
        
        public DWOS.UI.DS2LicenseActivation.SiteInfo[] GetSites(string customerKey) {
            return base.Channel.GetSites(customerKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSites(string customerKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSites(customerKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.UI.DS2LicenseActivation.SiteInfo[] EndGetSites(System.IAsyncResult result) {
            return base.Channel.EndGetSites(result);
        }
        
        private System.IAsyncResult OnBeginGetSites(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string customerKey = ((string)(inValues[0]));
            return this.BeginGetSites(customerKey, callback, asyncState);
        }
        
        private object[] OnEndGetSites(System.IAsyncResult result) {
            DWOS.UI.DS2LicenseActivation.SiteInfo[] retVal = this.EndGetSites(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSitesCompleted(object state) {
            if ((this.GetSitesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSitesCompleted(this, new GetSitesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSitesAsync(string customerKey) {
            this.GetSitesAsync(customerKey, null);
        }
        
        public void GetSitesAsync(string customerKey, object userState) {
            if ((this.onBeginGetSitesDelegate == null)) {
                this.onBeginGetSitesDelegate = new BeginOperationDelegate(this.OnBeginGetSites);
            }
            if ((this.onEndGetSitesDelegate == null)) {
                this.onEndGetSitesDelegate = new EndOperationDelegate(this.OnEndGetSites);
            }
            if ((this.onGetSitesCompletedDelegate == null)) {
                this.onGetSitesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSitesCompleted);
            }
            base.InvokeAsync(this.onBeginGetSitesDelegate, new object[] {
                        customerKey}, this.onEndGetSitesDelegate, this.onGetSitesCompletedDelegate, userState);
        }
        
        public void UpdateStats(string productID, string customerKey, DWOS.UI.DS2LicenseActivation.UsageStatistics stats) {
            base.Channel.UpdateStats(productID, customerKey, stats);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateStats(string productID, string customerKey, DWOS.UI.DS2LicenseActivation.UsageStatistics stats, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateStats(productID, customerKey, stats, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateStats(System.IAsyncResult result) {
            base.Channel.EndUpdateStats(result);
        }
        
        private System.IAsyncResult OnBeginUpdateStats(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string productID = ((string)(inValues[0]));
            string customerKey = ((string)(inValues[1]));
            DWOS.UI.DS2LicenseActivation.UsageStatistics stats = ((DWOS.UI.DS2LicenseActivation.UsageStatistics)(inValues[2]));
            return this.BeginUpdateStats(productID, customerKey, stats, callback, asyncState);
        }
        
        private object[] OnEndUpdateStats(System.IAsyncResult result) {
            this.EndUpdateStats(result);
            return null;
        }
        
        private void OnUpdateStatsCompleted(object state) {
            if ((this.UpdateStatsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateStatsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateStatsAsync(string productID, string customerKey, DWOS.UI.DS2LicenseActivation.UsageStatistics stats) {
            this.UpdateStatsAsync(productID, customerKey, stats, null);
        }
        
        public void UpdateStatsAsync(string productID, string customerKey, DWOS.UI.DS2LicenseActivation.UsageStatistics stats, object userState) {
            if ((this.onBeginUpdateStatsDelegate == null)) {
                this.onBeginUpdateStatsDelegate = new BeginOperationDelegate(this.OnBeginUpdateStats);
            }
            if ((this.onEndUpdateStatsDelegate == null)) {
                this.onEndUpdateStatsDelegate = new EndOperationDelegate(this.OnEndUpdateStats);
            }
            if ((this.onUpdateStatsCompletedDelegate == null)) {
                this.onUpdateStatsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateStatsCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateStatsDelegate, new object[] {
                        productID,
                        customerKey,
                        stats}, this.onEndUpdateStatsDelegate, this.onUpdateStatsCompletedDelegate, userState);
        }
    }
}
