<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ultraToolTipManager1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>66</value>
  </metadata>
  <data name="ultraToolTipInfo5.ToolTipTextFormatted" xml:space="preserve">
    <value>If checked, operators can put Work Orders on hold for Import/Export Review.&lt;br/&gt;&lt;br/&gt;When enabled, Work Orders for customers that are based in a different &lt;br/&gt;country than the company's go to Import/Export Review.</value>
  </data>
  <data name="ultraToolTipInfo6.ToolTipTextFormatted" xml:space="preserve">
    <value>If &lt;b&gt;checked&lt;/b&gt;, Shipping Manager will check the work order's product class&lt;br/&gt; when you add it to a shipping package. If the work order has a different product&lt;br/&gt; class than the rest of the package, DWOS will show an error. &lt;br/&gt; &lt;br/&gt; If &lt;b&gt;unchecked&lt;/b&gt; (default), DWOS allows orders with different product&lt;br/&gt; classes in the same shipping package.</value>
  </data>
  <data name="ultraToolTipInfo10.ToolTipTextFormatted" xml:space="preserve">
    <value>If &lt;b&gt;checked&lt;/b&gt;, DWOS will automatically batch Sales Orders after review (or after creation if Order Review is disabled).&lt;br/&gt;If &lt;b&gt;unchecked&lt;/b&gt; (default), DWOS will not automatically batch Work Orders in Sales Orders.</value>
  </data>
  <data name="ultraToolTipInfo19.ToolTipTextFormatted" xml:space="preserve">
    <value>If &lt;b&gt;checked&lt;/b&gt;, allows orders and operators to be in processing lines.&lt;br/&gt;If an order is in a processing line, the operator must be in the same department and processing line.&lt;br/&gt;&lt;br/&gt;If &lt;b&gt;unchecked&lt;/b&gt; (default), hides line-related functionality from users.</value>
  </data>
  <data name="ultraToolTipInfo20.ToolTipTextFormatted" xml:space="preserve">
    <value>If checked:&lt;br/&gt;- The workflow will include statements of repairs during shipping.&lt;br/&gt;- Orders will have an 'Imported Price' field and a 'Description of Work' field.&lt;br/&gt;&lt;br/&gt;This option should be enabled if the company operates outside of the US.</value>
  </data>
  <data name="ultraToolTipInfo22.ToolTipTextFormatted" xml:space="preserve">
    <value>Determines strictness of process questions and inspection questions.&lt;br/&gt;If set to &lt;strong&gt;Strict&lt;/strong&gt; (default):&lt;br/&gt;&amp;nbsp; - For inspections, DWOS will ignore default values for list-type questions (like PassOrFail).&lt;br/&gt;If set to &lt;strong&gt;Normal&lt;/strong&gt;:&lt;br/&gt;&amp;nbsp; - For inspections, allows use of default values for any question.</value>
  </data>
  <data name="ultraToolTipInfo24.ToolTipTextFormatted" xml:space="preserve">
    <value>If checked, a batch can contain multiple processes. If a batch has multiple processes then the&amp;edsp;&lt;br/&gt;batch will be processed, checked in, and inspected as a single batch.&lt;br/&gt;&lt;br/&gt;If unchecked, a batch can only contain 1 process. After the batch is processed, it is immediately&lt;br/&gt;closed. This will prevent batches from being inspected as a batch.&lt;br/&gt;</value>
  </data>
</root>