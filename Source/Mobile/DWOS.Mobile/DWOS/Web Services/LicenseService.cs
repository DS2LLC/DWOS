//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 
namespace DWOS.LicenseManager
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseSummary", Namespace="http://schemas.datacontract.org/2004/07/DWOS.LicenseManager")]
    public partial class LicenseSummary : object
    {
        
        private int AvaliableActivationsField;
        
        private DWOS.LicenseManager.UserActivation[] CurrentActivationsField;
        
        private int TotalActivationsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AvaliableActivations
        {
            get
            {
                return this.AvaliableActivationsField;
            }
            set
            {
                this.AvaliableActivationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DWOS.LicenseManager.UserActivation[] CurrentActivations
        {
            get
            {
                return this.CurrentActivationsField;
            }
            set
            {
                this.CurrentActivationsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalActivations
        {
            get
            {
                return this.TotalActivationsField;
            }
            set
            {
                this.TotalActivationsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserActivation", Namespace="http://schemas.datacontract.org/2004/07/DWOS.LicenseManager")]
    public partial class UserActivation : object
    {
        
        private System.DateTime ActivatedField;
        
        private string ComputerNameField;
        
        private System.DateTime LastCommunicationField;
        
        private System.Guid UIDField;
        
        private int UserIdField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Activated
        {
            get
            {
                return this.ActivatedField;
            }
            set
            {
                this.ActivatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ComputerName
        {
            get
            {
                return this.ComputerNameField;
            }
            set
            {
                this.ComputerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastCommunication
        {
            get
            {
                return this.LastCommunicationField;
            }
            set
            {
                this.LastCommunicationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UID
        {
            get
            {
                return this.UIDField;
            }
            set
            {
                this.UIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId
        {
            get
            {
                return this.UserIdField;
            }
            set
            {
                this.UserIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
}
namespace DWOS.Server.Services
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationInfo", Namespace="http://schemas.datacontract.org/2004/07/DWOS.Server.Services")]
    public partial class ApplicationInfo : object
    {
        
        private string DatabaseConnectionField;
        
        private string MinimumClientVersionField;
        
        private string ServerVersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseConnection
        {
            get
            {
                return this.DatabaseConnectionField;
            }
            set
            {
                this.DatabaseConnectionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MinimumClientVersion
        {
            get
            {
                return this.MinimumClientVersionField;
            }
            set
            {
                this.MinimumClientVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerVersion
        {
            get
            {
                return this.ServerVersionField;
            }
            set
            {
                this.ServerVersionField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ILicenseService")]
public interface ILicenseService
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/CheckOutLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckOutLicenseResponse")]
    System.IAsyncResult BeginCheckOutLicense(string computerName, int userId, string userName, System.Guid uid, System.AsyncCallback callback, object asyncState);
    
    bool EndCheckOutLicense(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/CheckInLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckInLicenseResponse")]
    System.IAsyncResult BeginCheckInLicense(System.Guid uid, System.AsyncCallback callback, object asyncState);
    
    void EndCheckInLicense(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/KeepLicenseAlive", ReplyAction="http://tempuri.org/ILicenseService/KeepLicenseAliveResponse")]
    System.IAsyncResult BeginKeepLicenseAlive(System.Guid uid, System.AsyncCallback callback, object asyncState);
    
    bool EndKeepLicenseAlive(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/GetLicenseSummary", ReplyAction="http://tempuri.org/ILicenseService/GetLicenseSummaryResponse")]
    System.IAsyncResult BeginGetLicenseSummary(System.AsyncCallback callback, object asyncState);
    
    DWOS.LicenseManager.LicenseSummary EndGetLicenseSummary(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/GetApplicationInfo", ReplyAction="http://tempuri.org/ILicenseService/GetApplicationInfoResponse")]
    System.IAsyncResult BeginGetApplicationInfo(System.AsyncCallback callback, object asyncState);
    
    DWOS.Server.Services.ApplicationInfo EndGetApplicationInfo(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/ValidateLicenseActivation", ReplyAction="http://tempuri.org/ILicenseService/ValidateLicenseActivationResponse")]
    System.IAsyncResult BeginValidateLicenseActivation(System.AsyncCallback callback, object asyncState);
    
    void EndValidateLicenseActivation(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/ReloadCompanyInfo", ReplyAction="http://tempuri.org/ILicenseService/ReloadCompanyInfoResponse")]
    System.IAsyncResult BeginReloadCompanyInfo(System.AsyncCallback callback, object asyncState);
    
    void EndReloadCompanyInfo(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ILicenseServiceChannel : ILicenseService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CheckOutLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public CheckOutLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public bool Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class KeepLicenseAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public KeepLicenseAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public bool Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetLicenseSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetLicenseSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public DWOS.LicenseManager.LicenseSummary Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((DWOS.LicenseManager.LicenseSummary)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetApplicationInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetApplicationInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public DWOS.Server.Services.ApplicationInfo Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((DWOS.Server.Services.ApplicationInfo)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class LicenseServiceClient : System.ServiceModel.ClientBase<ILicenseService>, ILicenseService
{
    
    private BeginOperationDelegate onBeginCheckOutLicenseDelegate;
    
    private EndOperationDelegate onEndCheckOutLicenseDelegate;
    
    private System.Threading.SendOrPostCallback onCheckOutLicenseCompletedDelegate;
    
    private BeginOperationDelegate onBeginCheckInLicenseDelegate;
    
    private EndOperationDelegate onEndCheckInLicenseDelegate;
    
    private System.Threading.SendOrPostCallback onCheckInLicenseCompletedDelegate;
    
    private BeginOperationDelegate onBeginKeepLicenseAliveDelegate;
    
    private EndOperationDelegate onEndKeepLicenseAliveDelegate;
    
    private System.Threading.SendOrPostCallback onKeepLicenseAliveCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetLicenseSummaryDelegate;
    
    private EndOperationDelegate onEndGetLicenseSummaryDelegate;
    
    private System.Threading.SendOrPostCallback onGetLicenseSummaryCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetApplicationInfoDelegate;
    
    private EndOperationDelegate onEndGetApplicationInfoDelegate;
    
    private System.Threading.SendOrPostCallback onGetApplicationInfoCompletedDelegate;
    
    private BeginOperationDelegate onBeginValidateLicenseActivationDelegate;
    
    private EndOperationDelegate onEndValidateLicenseActivationDelegate;
    
    private System.Threading.SendOrPostCallback onValidateLicenseActivationCompletedDelegate;
    
    private BeginOperationDelegate onBeginReloadCompanyInfoDelegate;
    
    private EndOperationDelegate onEndReloadCompanyInfoDelegate;
    
    private System.Threading.SendOrPostCallback onReloadCompanyInfoCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public LicenseServiceClient()
    {
    }
    
    public LicenseServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public LicenseServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public LicenseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public LicenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<CheckOutLicenseCompletedEventArgs> CheckOutLicenseCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckInLicenseCompleted;
    
    public event System.EventHandler<KeepLicenseAliveCompletedEventArgs> KeepLicenseAliveCompleted;
    
    public event System.EventHandler<GetLicenseSummaryCompletedEventArgs> GetLicenseSummaryCompleted;
    
    public event System.EventHandler<GetApplicationInfoCompletedEventArgs> GetApplicationInfoCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ValidateLicenseActivationCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReloadCompanyInfoCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ILicenseService.BeginCheckOutLicense(string computerName, int userId, string userName, System.Guid uid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginCheckOutLicense(computerName, userId, userName, uid, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    bool ILicenseService.EndCheckOutLicense(System.IAsyncResult result)
    {
        return base.Channel.EndCheckOutLicense(result);
    }
    
    private System.IAsyncResult OnBeginCheckOutLicense(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string computerName = ((string)(inValues[0]));
        int userId = ((int)(inValues[1]));
        string userName = ((string)(inValues[2]));
        System.Guid uid = ((System.Guid)(inValues[3]));
        return ((ILicenseService)(this)).BeginCheckOutLicense(computerName, userId, userName, uid, callback, asyncState);
    }
    
    private object[] OnEndCheckOutLicense(System.IAsyncResult result)
    {
        bool retVal = ((ILicenseService)(this)).EndCheckOutLicense(result);
        return new object[] {
                retVal};
    }
    
    private void OnCheckOutLicenseCompleted(object state)
    {
        if ((this.CheckOutLicenseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CheckOutLicenseCompleted(this, new CheckOutLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CheckOutLicenseAsync(string computerName, int userId, string userName, System.Guid uid)
    {
        this.CheckOutLicenseAsync(computerName, userId, userName, uid, null);
    }
    
    public void CheckOutLicenseAsync(string computerName, int userId, string userName, System.Guid uid, object userState)
    {
        if ((this.onBeginCheckOutLicenseDelegate == null))
        {
            this.onBeginCheckOutLicenseDelegate = new BeginOperationDelegate(this.OnBeginCheckOutLicense);
        }
        if ((this.onEndCheckOutLicenseDelegate == null))
        {
            this.onEndCheckOutLicenseDelegate = new EndOperationDelegate(this.OnEndCheckOutLicense);
        }
        if ((this.onCheckOutLicenseCompletedDelegate == null))
        {
            this.onCheckOutLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckOutLicenseCompleted);
        }
        base.InvokeAsync(this.onBeginCheckOutLicenseDelegate, new object[] {
                    computerName,
                    userId,
                    userName,
                    uid}, this.onEndCheckOutLicenseDelegate, this.onCheckOutLicenseCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ILicenseService.BeginCheckInLicense(System.Guid uid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginCheckInLicense(uid, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void ILicenseService.EndCheckInLicense(System.IAsyncResult result)
    {
        base.Channel.EndCheckInLicense(result);
    }
    
    private System.IAsyncResult OnBeginCheckInLicense(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        System.Guid uid = ((System.Guid)(inValues[0]));
        return ((ILicenseService)(this)).BeginCheckInLicense(uid, callback, asyncState);
    }
    
    private object[] OnEndCheckInLicense(System.IAsyncResult result)
    {
        ((ILicenseService)(this)).EndCheckInLicense(result);
        return null;
    }
    
    private void OnCheckInLicenseCompleted(object state)
    {
        if ((this.CheckInLicenseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CheckInLicenseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CheckInLicenseAsync(System.Guid uid)
    {
        this.CheckInLicenseAsync(uid, null);
    }
    
    public void CheckInLicenseAsync(System.Guid uid, object userState)
    {
        if ((this.onBeginCheckInLicenseDelegate == null))
        {
            this.onBeginCheckInLicenseDelegate = new BeginOperationDelegate(this.OnBeginCheckInLicense);
        }
        if ((this.onEndCheckInLicenseDelegate == null))
        {
            this.onEndCheckInLicenseDelegate = new EndOperationDelegate(this.OnEndCheckInLicense);
        }
        if ((this.onCheckInLicenseCompletedDelegate == null))
        {
            this.onCheckInLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckInLicenseCompleted);
        }
        base.InvokeAsync(this.onBeginCheckInLicenseDelegate, new object[] {
                    uid}, this.onEndCheckInLicenseDelegate, this.onCheckInLicenseCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ILicenseService.BeginKeepLicenseAlive(System.Guid uid, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginKeepLicenseAlive(uid, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    bool ILicenseService.EndKeepLicenseAlive(System.IAsyncResult result)
    {
        return base.Channel.EndKeepLicenseAlive(result);
    }
    
    private System.IAsyncResult OnBeginKeepLicenseAlive(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        System.Guid uid = ((System.Guid)(inValues[0]));
        return ((ILicenseService)(this)).BeginKeepLicenseAlive(uid, callback, asyncState);
    }
    
    private object[] OnEndKeepLicenseAlive(System.IAsyncResult result)
    {
        bool retVal = ((ILicenseService)(this)).EndKeepLicenseAlive(result);
        return new object[] {
                retVal};
    }
    
    private void OnKeepLicenseAliveCompleted(object state)
    {
        if ((this.KeepLicenseAliveCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.KeepLicenseAliveCompleted(this, new KeepLicenseAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void KeepLicenseAliveAsync(System.Guid uid)
    {
        this.KeepLicenseAliveAsync(uid, null);
    }
    
    public void KeepLicenseAliveAsync(System.Guid uid, object userState)
    {
        if ((this.onBeginKeepLicenseAliveDelegate == null))
        {
            this.onBeginKeepLicenseAliveDelegate = new BeginOperationDelegate(this.OnBeginKeepLicenseAlive);
        }
        if ((this.onEndKeepLicenseAliveDelegate == null))
        {
            this.onEndKeepLicenseAliveDelegate = new EndOperationDelegate(this.OnEndKeepLicenseAlive);
        }
        if ((this.onKeepLicenseAliveCompletedDelegate == null))
        {
            this.onKeepLicenseAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKeepLicenseAliveCompleted);
        }
        base.InvokeAsync(this.onBeginKeepLicenseAliveDelegate, new object[] {
                    uid}, this.onEndKeepLicenseAliveDelegate, this.onKeepLicenseAliveCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ILicenseService.BeginGetLicenseSummary(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetLicenseSummary(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    DWOS.LicenseManager.LicenseSummary ILicenseService.EndGetLicenseSummary(System.IAsyncResult result)
    {
        return base.Channel.EndGetLicenseSummary(result);
    }
    
    private System.IAsyncResult OnBeginGetLicenseSummary(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ILicenseService)(this)).BeginGetLicenseSummary(callback, asyncState);
    }
    
    private object[] OnEndGetLicenseSummary(System.IAsyncResult result)
    {
        DWOS.LicenseManager.LicenseSummary retVal = ((ILicenseService)(this)).EndGetLicenseSummary(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetLicenseSummaryCompleted(object state)
    {
        if ((this.GetLicenseSummaryCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetLicenseSummaryCompleted(this, new GetLicenseSummaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetLicenseSummaryAsync()
    {
        this.GetLicenseSummaryAsync(null);
    }
    
    public void GetLicenseSummaryAsync(object userState)
    {
        if ((this.onBeginGetLicenseSummaryDelegate == null))
        {
            this.onBeginGetLicenseSummaryDelegate = new BeginOperationDelegate(this.OnBeginGetLicenseSummary);
        }
        if ((this.onEndGetLicenseSummaryDelegate == null))
        {
            this.onEndGetLicenseSummaryDelegate = new EndOperationDelegate(this.OnEndGetLicenseSummary);
        }
        if ((this.onGetLicenseSummaryCompletedDelegate == null))
        {
            this.onGetLicenseSummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLicenseSummaryCompleted);
        }
        base.InvokeAsync(this.onBeginGetLicenseSummaryDelegate, null, this.onEndGetLicenseSummaryDelegate, this.onGetLicenseSummaryCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ILicenseService.BeginGetApplicationInfo(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetApplicationInfo(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    DWOS.Server.Services.ApplicationInfo ILicenseService.EndGetApplicationInfo(System.IAsyncResult result)
    {
        return base.Channel.EndGetApplicationInfo(result);
    }
    
    private System.IAsyncResult OnBeginGetApplicationInfo(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ILicenseService)(this)).BeginGetApplicationInfo(callback, asyncState);
    }
    
    private object[] OnEndGetApplicationInfo(System.IAsyncResult result)
    {
        DWOS.Server.Services.ApplicationInfo retVal = ((ILicenseService)(this)).EndGetApplicationInfo(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetApplicationInfoCompleted(object state)
    {
        if ((this.GetApplicationInfoCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetApplicationInfoCompleted(this, new GetApplicationInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetApplicationInfoAsync()
    {
        this.GetApplicationInfoAsync(null);
    }
    
    public void GetApplicationInfoAsync(object userState)
    {
        if ((this.onBeginGetApplicationInfoDelegate == null))
        {
            this.onBeginGetApplicationInfoDelegate = new BeginOperationDelegate(this.OnBeginGetApplicationInfo);
        }
        if ((this.onEndGetApplicationInfoDelegate == null))
        {
            this.onEndGetApplicationInfoDelegate = new EndOperationDelegate(this.OnEndGetApplicationInfo);
        }
        if ((this.onGetApplicationInfoCompletedDelegate == null))
        {
            this.onGetApplicationInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetApplicationInfoCompleted);
        }
        base.InvokeAsync(this.onBeginGetApplicationInfoDelegate, null, this.onEndGetApplicationInfoDelegate, this.onGetApplicationInfoCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ILicenseService.BeginValidateLicenseActivation(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginValidateLicenseActivation(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void ILicenseService.EndValidateLicenseActivation(System.IAsyncResult result)
    {
        base.Channel.EndValidateLicenseActivation(result);
    }
    
    private System.IAsyncResult OnBeginValidateLicenseActivation(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ILicenseService)(this)).BeginValidateLicenseActivation(callback, asyncState);
    }
    
    private object[] OnEndValidateLicenseActivation(System.IAsyncResult result)
    {
        ((ILicenseService)(this)).EndValidateLicenseActivation(result);
        return null;
    }
    
    private void OnValidateLicenseActivationCompleted(object state)
    {
        if ((this.ValidateLicenseActivationCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ValidateLicenseActivationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void ValidateLicenseActivationAsync()
    {
        this.ValidateLicenseActivationAsync(null);
    }
    
    public void ValidateLicenseActivationAsync(object userState)
    {
        if ((this.onBeginValidateLicenseActivationDelegate == null))
        {
            this.onBeginValidateLicenseActivationDelegate = new BeginOperationDelegate(this.OnBeginValidateLicenseActivation);
        }
        if ((this.onEndValidateLicenseActivationDelegate == null))
        {
            this.onEndValidateLicenseActivationDelegate = new EndOperationDelegate(this.OnEndValidateLicenseActivation);
        }
        if ((this.onValidateLicenseActivationCompletedDelegate == null))
        {
            this.onValidateLicenseActivationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateLicenseActivationCompleted);
        }
        base.InvokeAsync(this.onBeginValidateLicenseActivationDelegate, null, this.onEndValidateLicenseActivationDelegate, this.onValidateLicenseActivationCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ILicenseService.BeginReloadCompanyInfo(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginReloadCompanyInfo(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void ILicenseService.EndReloadCompanyInfo(System.IAsyncResult result)
    {
        base.Channel.EndReloadCompanyInfo(result);
    }
    
    private System.IAsyncResult OnBeginReloadCompanyInfo(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ILicenseService)(this)).BeginReloadCompanyInfo(callback, asyncState);
    }
    
    private object[] OnEndReloadCompanyInfo(System.IAsyncResult result)
    {
        ((ILicenseService)(this)).EndReloadCompanyInfo(result);
        return null;
    }
    
    private void OnReloadCompanyInfoCompleted(object state)
    {
        if ((this.ReloadCompanyInfoCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ReloadCompanyInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void ReloadCompanyInfoAsync()
    {
        this.ReloadCompanyInfoAsync(null);
    }
    
    public void ReloadCompanyInfoAsync(object userState)
    {
        if ((this.onBeginReloadCompanyInfoDelegate == null))
        {
            this.onBeginReloadCompanyInfoDelegate = new BeginOperationDelegate(this.OnBeginReloadCompanyInfo);
        }
        if ((this.onEndReloadCompanyInfoDelegate == null))
        {
            this.onEndReloadCompanyInfoDelegate = new EndOperationDelegate(this.OnEndReloadCompanyInfo);
        }
        if ((this.onReloadCompanyInfoCompletedDelegate == null))
        {
            this.onReloadCompanyInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReloadCompanyInfoCompleted);
        }
        base.InvokeAsync(this.onBeginReloadCompanyInfoDelegate, null, this.onEndReloadCompanyInfoDelegate, this.onReloadCompanyInfoCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override ILicenseService CreateChannel()
    {
        return new LicenseServiceClientChannel(this);
    }
    
    private class LicenseServiceClientChannel : ChannelBase<ILicenseService>, ILicenseService
    {
        
        public LicenseServiceClientChannel(System.ServiceModel.ClientBase<ILicenseService> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginCheckOutLicense(string computerName, int userId, string userName, System.Guid uid, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[4];
            _args[0] = computerName;
            _args[1] = userId;
            _args[2] = userName;
            _args[3] = uid;
            System.IAsyncResult _result = base.BeginInvoke("CheckOutLicense", _args, callback, asyncState);
            return _result;
        }
        
        public bool EndCheckOutLicense(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            bool _result = ((bool)(base.EndInvoke("CheckOutLicense", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginCheckInLicense(System.Guid uid, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = uid;
            System.IAsyncResult _result = base.BeginInvoke("CheckInLicense", _args, callback, asyncState);
            return _result;
        }
        
        public void EndCheckInLicense(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("CheckInLicense", _args, result);
        }
        
        public System.IAsyncResult BeginKeepLicenseAlive(System.Guid uid, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = uid;
            System.IAsyncResult _result = base.BeginInvoke("KeepLicenseAlive", _args, callback, asyncState);
            return _result;
        }
        
        public bool EndKeepLicenseAlive(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            bool _result = ((bool)(base.EndInvoke("KeepLicenseAlive", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetLicenseSummary(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetLicenseSummary", _args, callback, asyncState);
            return _result;
        }
        
        public DWOS.LicenseManager.LicenseSummary EndGetLicenseSummary(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            DWOS.LicenseManager.LicenseSummary _result = ((DWOS.LicenseManager.LicenseSummary)(base.EndInvoke("GetLicenseSummary", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetApplicationInfo(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetApplicationInfo", _args, callback, asyncState);
            return _result;
        }
        
        public DWOS.Server.Services.ApplicationInfo EndGetApplicationInfo(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            DWOS.Server.Services.ApplicationInfo _result = ((DWOS.Server.Services.ApplicationInfo)(base.EndInvoke("GetApplicationInfo", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginValidateLicenseActivation(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("ValidateLicenseActivation", _args, callback, asyncState);
            return _result;
        }
        
        public void EndValidateLicenseActivation(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("ValidateLicenseActivation", _args, result);
        }
        
        public System.IAsyncResult BeginReloadCompanyInfo(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("ReloadCompanyInfo", _args, callback, asyncState);
            return _result;
        }
        
        public void EndReloadCompanyInfo(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("ReloadCompanyInfo", _args, result);
        }
    }
}
