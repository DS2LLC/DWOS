//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DWOS.Server.Admin.Licensing {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseSummary", Namespace="http://schemas.datacontract.org/2004/07/DWOS.LicenseManager")]
    [System.SerializableAttribute()]
    public partial class LicenseSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AvaliableActivationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<DWOS.Server.Admin.Licensing.UserActivation> CurrentActivationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalActivationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AvaliableActivations {
            get {
                return this.AvaliableActivationsField;
            }
            set {
                if ((this.AvaliableActivationsField.Equals(value) != true)) {
                    this.AvaliableActivationsField = value;
                    this.RaisePropertyChanged("AvaliableActivations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<DWOS.Server.Admin.Licensing.UserActivation> CurrentActivations {
            get {
                return this.CurrentActivationsField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentActivationsField, value) != true)) {
                    this.CurrentActivationsField = value;
                    this.RaisePropertyChanged("CurrentActivations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalActivations {
            get {
                return this.TotalActivationsField;
            }
            set {
                if ((this.TotalActivationsField.Equals(value) != true)) {
                    this.TotalActivationsField = value;
                    this.RaisePropertyChanged("TotalActivations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserActivation", Namespace="http://schemas.datacontract.org/2004/07/DWOS.LicenseManager")]
    [System.SerializableAttribute()]
    public partial class UserActivation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ComputerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastCommunicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Activated {
            get {
                return this.ActivatedField;
            }
            set {
                if ((this.ActivatedField.Equals(value) != true)) {
                    this.ActivatedField = value;
                    this.RaisePropertyChanged("Activated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ComputerName {
            get {
                return this.ComputerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ComputerNameField, value) != true)) {
                    this.ComputerNameField = value;
                    this.RaisePropertyChanged("ComputerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastCommunication {
            get {
                return this.LastCommunicationField;
            }
            set {
                if ((this.LastCommunicationField.Equals(value) != true)) {
                    this.LastCommunicationField = value;
                    this.RaisePropertyChanged("LastCommunication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UID {
            get {
                return this.UIDField;
            }
            set {
                if ((this.UIDField.Equals(value) != true)) {
                    this.UIDField = value;
                    this.RaisePropertyChanged("UID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationInfo", Namespace="http://schemas.datacontract.org/2004/07/DWOS.Server.Services")]
    [System.SerializableAttribute()]
    public partial class ApplicationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DatabaseConnectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseConnection {
            get {
                return this.DatabaseConnectionField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseConnectionField, value) != true)) {
                    this.DatabaseConnectionField = value;
                    this.RaisePropertyChanged("DatabaseConnection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerVersion {
            get {
                return this.ServerVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerVersionField, value) != true)) {
                    this.ServerVersionField = value;
                    this.RaisePropertyChanged("ServerVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Licensing.ILicenseService")]
    public interface ILicenseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/CheckOutLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckOutLicenseResponse")]
        bool CheckOutLicense(string computerName, int userId, string userName, System.Guid uid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/CheckOutLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckOutLicenseResponse")]
        System.IAsyncResult BeginCheckOutLicense(string computerName, int userId, string userName, System.Guid uid, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckOutLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/CheckInLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckInLicenseResponse")]
        void CheckInLicense(System.Guid uid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/CheckInLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckInLicenseResponse")]
        System.IAsyncResult BeginCheckInLicense(System.Guid uid, System.AsyncCallback callback, object asyncState);
        
        void EndCheckInLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/KeepLicenseAlive", ReplyAction="http://tempuri.org/ILicenseService/KeepLicenseAliveResponse")]
        bool KeepLicenseAlive(System.Guid uid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/KeepLicenseAlive", ReplyAction="http://tempuri.org/ILicenseService/KeepLicenseAliveResponse")]
        System.IAsyncResult BeginKeepLicenseAlive(System.Guid uid, System.AsyncCallback callback, object asyncState);
        
        bool EndKeepLicenseAlive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetLicenseSummary", ReplyAction="http://tempuri.org/ILicenseService/GetLicenseSummaryResponse")]
        DWOS.Server.Admin.Licensing.LicenseSummary GetLicenseSummary();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/GetLicenseSummary", ReplyAction="http://tempuri.org/ILicenseService/GetLicenseSummaryResponse")]
        System.IAsyncResult BeginGetLicenseSummary(System.AsyncCallback callback, object asyncState);
        
        DWOS.Server.Admin.Licensing.LicenseSummary EndGetLicenseSummary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetApplicationInfo", ReplyAction="http://tempuri.org/ILicenseService/GetApplicationInfoResponse")]
        DWOS.Server.Admin.Licensing.ApplicationInfo GetApplicationInfo();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/GetApplicationInfo", ReplyAction="http://tempuri.org/ILicenseService/GetApplicationInfoResponse")]
        System.IAsyncResult BeginGetApplicationInfo(System.AsyncCallback callback, object asyncState);
        
        DWOS.Server.Admin.Licensing.ApplicationInfo EndGetApplicationInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/ValidateLicenseActivation", ReplyAction="http://tempuri.org/ILicenseService/ValidateLicenseActivationResponse")]
        void ValidateLicenseActivation();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/ValidateLicenseActivation", ReplyAction="http://tempuri.org/ILicenseService/ValidateLicenseActivationResponse")]
        System.IAsyncResult BeginValidateLicenseActivation(System.AsyncCallback callback, object asyncState);
        
        void EndValidateLicenseActivation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/ReloadCompanyInfo", ReplyAction="http://tempuri.org/ILicenseService/ReloadCompanyInfoResponse")]
        void ReloadCompanyInfo();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/ReloadCompanyInfo", ReplyAction="http://tempuri.org/ILicenseService/ReloadCompanyInfoResponse")]
        System.IAsyncResult BeginReloadCompanyInfo(System.AsyncCallback callback, object asyncState);
        
        void EndReloadCompanyInfo(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILicenseServiceChannel : DWOS.Server.Admin.Licensing.ILicenseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckOutLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckOutLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KeepLicenseAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public KeepLicenseAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLicenseSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLicenseSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.Server.Admin.Licensing.LicenseSummary Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.Server.Admin.Licensing.LicenseSummary)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetApplicationInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetApplicationInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.Server.Admin.Licensing.ApplicationInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.Server.Admin.Licensing.ApplicationInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicenseServiceClient : System.ServiceModel.ClientBase<DWOS.Server.Admin.Licensing.ILicenseService>, DWOS.Server.Admin.Licensing.ILicenseService {
        
        private BeginOperationDelegate onBeginCheckOutLicenseDelegate;
        
        private EndOperationDelegate onEndCheckOutLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onCheckOutLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckInLicenseDelegate;
        
        private EndOperationDelegate onEndCheckInLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onCheckInLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginKeepLicenseAliveDelegate;
        
        private EndOperationDelegate onEndKeepLicenseAliveDelegate;
        
        private System.Threading.SendOrPostCallback onKeepLicenseAliveCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLicenseSummaryDelegate;
        
        private EndOperationDelegate onEndGetLicenseSummaryDelegate;
        
        private System.Threading.SendOrPostCallback onGetLicenseSummaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetApplicationInfoDelegate;
        
        private EndOperationDelegate onEndGetApplicationInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetApplicationInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateLicenseActivationDelegate;
        
        private EndOperationDelegate onEndValidateLicenseActivationDelegate;
        
        private System.Threading.SendOrPostCallback onValidateLicenseActivationCompletedDelegate;
        
        private BeginOperationDelegate onBeginReloadCompanyInfoDelegate;
        
        private EndOperationDelegate onEndReloadCompanyInfoDelegate;
        
        private System.Threading.SendOrPostCallback onReloadCompanyInfoCompletedDelegate;
        
        public LicenseServiceClient() {
        }
        
        public LicenseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicenseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CheckOutLicenseCompletedEventArgs> CheckOutLicenseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckInLicenseCompleted;
        
        public event System.EventHandler<KeepLicenseAliveCompletedEventArgs> KeepLicenseAliveCompleted;
        
        public event System.EventHandler<GetLicenseSummaryCompletedEventArgs> GetLicenseSummaryCompleted;
        
        public event System.EventHandler<GetApplicationInfoCompletedEventArgs> GetApplicationInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ValidateLicenseActivationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReloadCompanyInfoCompleted;
        
        public bool CheckOutLicense(string computerName, int userId, string userName, System.Guid uid) {
            return base.Channel.CheckOutLicense(computerName, userId, userName, uid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckOutLicense(string computerName, int userId, string userName, System.Guid uid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckOutLicense(computerName, userId, userName, uid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckOutLicense(System.IAsyncResult result) {
            return base.Channel.EndCheckOutLicense(result);
        }
        
        private System.IAsyncResult OnBeginCheckOutLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string computerName = ((string)(inValues[0]));
            int userId = ((int)(inValues[1]));
            string userName = ((string)(inValues[2]));
            System.Guid uid = ((System.Guid)(inValues[3]));
            return this.BeginCheckOutLicense(computerName, userId, userName, uid, callback, asyncState);
        }
        
        private object[] OnEndCheckOutLicense(System.IAsyncResult result) {
            bool retVal = this.EndCheckOutLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckOutLicenseCompleted(object state) {
            if ((this.CheckOutLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckOutLicenseCompleted(this, new CheckOutLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckOutLicenseAsync(string computerName, int userId, string userName, System.Guid uid) {
            this.CheckOutLicenseAsync(computerName, userId, userName, uid, null);
        }
        
        public void CheckOutLicenseAsync(string computerName, int userId, string userName, System.Guid uid, object userState) {
            if ((this.onBeginCheckOutLicenseDelegate == null)) {
                this.onBeginCheckOutLicenseDelegate = new BeginOperationDelegate(this.OnBeginCheckOutLicense);
            }
            if ((this.onEndCheckOutLicenseDelegate == null)) {
                this.onEndCheckOutLicenseDelegate = new EndOperationDelegate(this.OnEndCheckOutLicense);
            }
            if ((this.onCheckOutLicenseCompletedDelegate == null)) {
                this.onCheckOutLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckOutLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginCheckOutLicenseDelegate, new object[] {
                        computerName,
                        userId,
                        userName,
                        uid}, this.onEndCheckOutLicenseDelegate, this.onCheckOutLicenseCompletedDelegate, userState);
        }
        
        public void CheckInLicense(System.Guid uid) {
            base.Channel.CheckInLicense(uid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckInLicense(System.Guid uid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckInLicense(uid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCheckInLicense(System.IAsyncResult result) {
            base.Channel.EndCheckInLicense(result);
        }
        
        private System.IAsyncResult OnBeginCheckInLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid uid = ((System.Guid)(inValues[0]));
            return this.BeginCheckInLicense(uid, callback, asyncState);
        }
        
        private object[] OnEndCheckInLicense(System.IAsyncResult result) {
            this.EndCheckInLicense(result);
            return null;
        }
        
        private void OnCheckInLicenseCompleted(object state) {
            if ((this.CheckInLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckInLicenseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckInLicenseAsync(System.Guid uid) {
            this.CheckInLicenseAsync(uid, null);
        }
        
        public void CheckInLicenseAsync(System.Guid uid, object userState) {
            if ((this.onBeginCheckInLicenseDelegate == null)) {
                this.onBeginCheckInLicenseDelegate = new BeginOperationDelegate(this.OnBeginCheckInLicense);
            }
            if ((this.onEndCheckInLicenseDelegate == null)) {
                this.onEndCheckInLicenseDelegate = new EndOperationDelegate(this.OnEndCheckInLicense);
            }
            if ((this.onCheckInLicenseCompletedDelegate == null)) {
                this.onCheckInLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckInLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginCheckInLicenseDelegate, new object[] {
                        uid}, this.onEndCheckInLicenseDelegate, this.onCheckInLicenseCompletedDelegate, userState);
        }
        
        public bool KeepLicenseAlive(System.Guid uid) {
            return base.Channel.KeepLicenseAlive(uid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginKeepLicenseAlive(System.Guid uid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginKeepLicenseAlive(uid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndKeepLicenseAlive(System.IAsyncResult result) {
            return base.Channel.EndKeepLicenseAlive(result);
        }
        
        private System.IAsyncResult OnBeginKeepLicenseAlive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid uid = ((System.Guid)(inValues[0]));
            return this.BeginKeepLicenseAlive(uid, callback, asyncState);
        }
        
        private object[] OnEndKeepLicenseAlive(System.IAsyncResult result) {
            bool retVal = this.EndKeepLicenseAlive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnKeepLicenseAliveCompleted(object state) {
            if ((this.KeepLicenseAliveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.KeepLicenseAliveCompleted(this, new KeepLicenseAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void KeepLicenseAliveAsync(System.Guid uid) {
            this.KeepLicenseAliveAsync(uid, null);
        }
        
        public void KeepLicenseAliveAsync(System.Guid uid, object userState) {
            if ((this.onBeginKeepLicenseAliveDelegate == null)) {
                this.onBeginKeepLicenseAliveDelegate = new BeginOperationDelegate(this.OnBeginKeepLicenseAlive);
            }
            if ((this.onEndKeepLicenseAliveDelegate == null)) {
                this.onEndKeepLicenseAliveDelegate = new EndOperationDelegate(this.OnEndKeepLicenseAlive);
            }
            if ((this.onKeepLicenseAliveCompletedDelegate == null)) {
                this.onKeepLicenseAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKeepLicenseAliveCompleted);
            }
            base.InvokeAsync(this.onBeginKeepLicenseAliveDelegate, new object[] {
                        uid}, this.onEndKeepLicenseAliveDelegate, this.onKeepLicenseAliveCompletedDelegate, userState);
        }
        
        public DWOS.Server.Admin.Licensing.LicenseSummary GetLicenseSummary() {
            return base.Channel.GetLicenseSummary();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLicenseSummary(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLicenseSummary(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.Server.Admin.Licensing.LicenseSummary EndGetLicenseSummary(System.IAsyncResult result) {
            return base.Channel.EndGetLicenseSummary(result);
        }
        
        private System.IAsyncResult OnBeginGetLicenseSummary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetLicenseSummary(callback, asyncState);
        }
        
        private object[] OnEndGetLicenseSummary(System.IAsyncResult result) {
            DWOS.Server.Admin.Licensing.LicenseSummary retVal = this.EndGetLicenseSummary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLicenseSummaryCompleted(object state) {
            if ((this.GetLicenseSummaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLicenseSummaryCompleted(this, new GetLicenseSummaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLicenseSummaryAsync() {
            this.GetLicenseSummaryAsync(null);
        }
        
        public void GetLicenseSummaryAsync(object userState) {
            if ((this.onBeginGetLicenseSummaryDelegate == null)) {
                this.onBeginGetLicenseSummaryDelegate = new BeginOperationDelegate(this.OnBeginGetLicenseSummary);
            }
            if ((this.onEndGetLicenseSummaryDelegate == null)) {
                this.onEndGetLicenseSummaryDelegate = new EndOperationDelegate(this.OnEndGetLicenseSummary);
            }
            if ((this.onGetLicenseSummaryCompletedDelegate == null)) {
                this.onGetLicenseSummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLicenseSummaryCompleted);
            }
            base.InvokeAsync(this.onBeginGetLicenseSummaryDelegate, null, this.onEndGetLicenseSummaryDelegate, this.onGetLicenseSummaryCompletedDelegate, userState);
        }
        
        public DWOS.Server.Admin.Licensing.ApplicationInfo GetApplicationInfo() {
            return base.Channel.GetApplicationInfo();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetApplicationInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetApplicationInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.Server.Admin.Licensing.ApplicationInfo EndGetApplicationInfo(System.IAsyncResult result) {
            return base.Channel.EndGetApplicationInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetApplicationInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetApplicationInfo(callback, asyncState);
        }
        
        private object[] OnEndGetApplicationInfo(System.IAsyncResult result) {
            DWOS.Server.Admin.Licensing.ApplicationInfo retVal = this.EndGetApplicationInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetApplicationInfoCompleted(object state) {
            if ((this.GetApplicationInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetApplicationInfoCompleted(this, new GetApplicationInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetApplicationInfoAsync() {
            this.GetApplicationInfoAsync(null);
        }
        
        public void GetApplicationInfoAsync(object userState) {
            if ((this.onBeginGetApplicationInfoDelegate == null)) {
                this.onBeginGetApplicationInfoDelegate = new BeginOperationDelegate(this.OnBeginGetApplicationInfo);
            }
            if ((this.onEndGetApplicationInfoDelegate == null)) {
                this.onEndGetApplicationInfoDelegate = new EndOperationDelegate(this.OnEndGetApplicationInfo);
            }
            if ((this.onGetApplicationInfoCompletedDelegate == null)) {
                this.onGetApplicationInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetApplicationInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetApplicationInfoDelegate, null, this.onEndGetApplicationInfoDelegate, this.onGetApplicationInfoCompletedDelegate, userState);
        }
        
        public void ValidateLicenseActivation() {
            base.Channel.ValidateLicenseActivation();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidateLicenseActivation(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateLicenseActivation(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndValidateLicenseActivation(System.IAsyncResult result) {
            base.Channel.EndValidateLicenseActivation(result);
        }
        
        private System.IAsyncResult OnBeginValidateLicenseActivation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginValidateLicenseActivation(callback, asyncState);
        }
        
        private object[] OnEndValidateLicenseActivation(System.IAsyncResult result) {
            this.EndValidateLicenseActivation(result);
            return null;
        }
        
        private void OnValidateLicenseActivationCompleted(object state) {
            if ((this.ValidateLicenseActivationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateLicenseActivationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateLicenseActivationAsync() {
            this.ValidateLicenseActivationAsync(null);
        }
        
        public void ValidateLicenseActivationAsync(object userState) {
            if ((this.onBeginValidateLicenseActivationDelegate == null)) {
                this.onBeginValidateLicenseActivationDelegate = new BeginOperationDelegate(this.OnBeginValidateLicenseActivation);
            }
            if ((this.onEndValidateLicenseActivationDelegate == null)) {
                this.onEndValidateLicenseActivationDelegate = new EndOperationDelegate(this.OnEndValidateLicenseActivation);
            }
            if ((this.onValidateLicenseActivationCompletedDelegate == null)) {
                this.onValidateLicenseActivationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateLicenseActivationCompleted);
            }
            base.InvokeAsync(this.onBeginValidateLicenseActivationDelegate, null, this.onEndValidateLicenseActivationDelegate, this.onValidateLicenseActivationCompletedDelegate, userState);
        }
        
        public void ReloadCompanyInfo() {
            base.Channel.ReloadCompanyInfo();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReloadCompanyInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReloadCompanyInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReloadCompanyInfo(System.IAsyncResult result) {
            base.Channel.EndReloadCompanyInfo(result);
        }
        
        private System.IAsyncResult OnBeginReloadCompanyInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginReloadCompanyInfo(callback, asyncState);
        }
        
        private object[] OnEndReloadCompanyInfo(System.IAsyncResult result) {
            this.EndReloadCompanyInfo(result);
            return null;
        }
        
        private void OnReloadCompanyInfoCompleted(object state) {
            if ((this.ReloadCompanyInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReloadCompanyInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReloadCompanyInfoAsync() {
            this.ReloadCompanyInfoAsync(null);
        }
        
        public void ReloadCompanyInfoAsync(object userState) {
            if ((this.onBeginReloadCompanyInfoDelegate == null)) {
                this.onBeginReloadCompanyInfoDelegate = new BeginOperationDelegate(this.OnBeginReloadCompanyInfo);
            }
            if ((this.onEndReloadCompanyInfoDelegate == null)) {
                this.onEndReloadCompanyInfoDelegate = new EndOperationDelegate(this.OnEndReloadCompanyInfo);
            }
            if ((this.onReloadCompanyInfoCompletedDelegate == null)) {
                this.onReloadCompanyInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReloadCompanyInfoCompleted);
            }
            base.InvokeAsync(this.onBeginReloadCompanyInfoDelegate, null, this.onEndReloadCompanyInfoDelegate, this.onReloadCompanyInfoCompletedDelegate, userState);
        }
    }
}
