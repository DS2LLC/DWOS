//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DWOS.Service.Licensing {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseSummary", Namespace="http://schemas.datacontract.org/2004/07/DWOS.LicenseManager")]
    [System.SerializableAttribute()]
    public partial class LicenseSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AvaliableActivationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<DWOS.Service.Licensing.UserActivation> CurrentActivationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalActivationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AvaliableActivations {
            get {
                return this.AvaliableActivationsField;
            }
            set {
                if ((this.AvaliableActivationsField.Equals(value) != true)) {
                    this.AvaliableActivationsField = value;
                    this.RaisePropertyChanged("AvaliableActivations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<DWOS.Service.Licensing.UserActivation> CurrentActivations {
            get {
                return this.CurrentActivationsField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentActivationsField, value) != true)) {
                    this.CurrentActivationsField = value;
                    this.RaisePropertyChanged("CurrentActivations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalActivations {
            get {
                return this.TotalActivationsField;
            }
            set {
                if ((this.TotalActivationsField.Equals(value) != true)) {
                    this.TotalActivationsField = value;
                    this.RaisePropertyChanged("TotalActivations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserActivation", Namespace="http://schemas.datacontract.org/2004/07/DWOS.LicenseManager")]
    [System.SerializableAttribute()]
    public partial class UserActivation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ComputerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastCommunicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Activated {
            get {
                return this.ActivatedField;
            }
            set {
                if ((this.ActivatedField.Equals(value) != true)) {
                    this.ActivatedField = value;
                    this.RaisePropertyChanged("Activated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ComputerName {
            get {
                return this.ComputerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ComputerNameField, value) != true)) {
                    this.ComputerNameField = value;
                    this.RaisePropertyChanged("ComputerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastCommunication {
            get {
                return this.LastCommunicationField;
            }
            set {
                if ((this.LastCommunicationField.Equals(value) != true)) {
                    this.LastCommunicationField = value;
                    this.RaisePropertyChanged("LastCommunication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UID {
            get {
                return this.UIDField;
            }
            set {
                if ((this.UIDField.Equals(value) != true)) {
                    this.UIDField = value;
                    this.RaisePropertyChanged("UID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationInfo", Namespace="http://schemas.datacontract.org/2004/07/DWOS.Server.Services")]
    [System.SerializableAttribute()]
    public partial class ApplicationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DatabaseConnectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MinimumClientVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseConnection {
            get {
                return this.DatabaseConnectionField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseConnectionField, value) != true)) {
                    this.DatabaseConnectionField = value;
                    this.RaisePropertyChanged("DatabaseConnection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MinimumClientVersion {
            get {
                return this.MinimumClientVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.MinimumClientVersionField, value) != true)) {
                    this.MinimumClientVersionField = value;
                    this.RaisePropertyChanged("MinimumClientVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerVersion {
            get {
                return this.ServerVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerVersionField, value) != true)) {
                    this.ServerVersionField = value;
                    this.RaisePropertyChanged("ServerVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Licensing.ILicenseService")]
    public interface ILicenseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/CheckOutLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckOutLicenseResponse")]
        DWOS.Service.Licensing.CheckOutLicenseResponse CheckOutLicense(DWOS.Service.Licensing.CheckOutLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/CheckOutLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckOutLicenseResponse")]
        System.IAsyncResult BeginCheckOutLicense(DWOS.Service.Licensing.CheckOutLicenseRequest request, System.AsyncCallback callback, object asyncState);
        
        DWOS.Service.Licensing.CheckOutLicenseResponse EndCheckOutLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/CheckInLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckInLicenseResponse")]
        DWOS.Service.Licensing.CheckInLicenseResponse CheckInLicense(DWOS.Service.Licensing.CheckInLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/CheckInLicense", ReplyAction="http://tempuri.org/ILicenseService/CheckInLicenseResponse")]
        System.IAsyncResult BeginCheckInLicense(DWOS.Service.Licensing.CheckInLicenseRequest request, System.AsyncCallback callback, object asyncState);
        
        DWOS.Service.Licensing.CheckInLicenseResponse EndCheckInLicense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/KeepLicenseAlive", ReplyAction="http://tempuri.org/ILicenseService/KeepLicenseAliveResponse")]
        DWOS.Service.Licensing.KeepLicenseAliveResponse KeepLicenseAlive(DWOS.Service.Licensing.KeepLicenseAliveRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/KeepLicenseAlive", ReplyAction="http://tempuri.org/ILicenseService/KeepLicenseAliveResponse")]
        System.IAsyncResult BeginKeepLicenseAlive(DWOS.Service.Licensing.KeepLicenseAliveRequest request, System.AsyncCallback callback, object asyncState);
        
        DWOS.Service.Licensing.KeepLicenseAliveResponse EndKeepLicenseAlive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetLicenseSummary", ReplyAction="http://tempuri.org/ILicenseService/GetLicenseSummaryResponse")]
        DWOS.Service.Licensing.GetLicenseSummaryResponse GetLicenseSummary(DWOS.Service.Licensing.GetLicenseSummaryRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/GetLicenseSummary", ReplyAction="http://tempuri.org/ILicenseService/GetLicenseSummaryResponse")]
        System.IAsyncResult BeginGetLicenseSummary(DWOS.Service.Licensing.GetLicenseSummaryRequest request, System.AsyncCallback callback, object asyncState);
        
        DWOS.Service.Licensing.GetLicenseSummaryResponse EndGetLicenseSummary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetApplicationInfo", ReplyAction="http://tempuri.org/ILicenseService/GetApplicationInfoResponse")]
        DWOS.Service.Licensing.GetApplicationInfoResponse GetApplicationInfo(DWOS.Service.Licensing.GetApplicationInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/GetApplicationInfo", ReplyAction="http://tempuri.org/ILicenseService/GetApplicationInfoResponse")]
        System.IAsyncResult BeginGetApplicationInfo(DWOS.Service.Licensing.GetApplicationInfoRequest request, System.AsyncCallback callback, object asyncState);
        
        DWOS.Service.Licensing.GetApplicationInfoResponse EndGetApplicationInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/ValidateLicenseActivation", ReplyAction="http://tempuri.org/ILicenseService/ValidateLicenseActivationResponse")]
        DWOS.Service.Licensing.ValidateLicenseActivationResponse ValidateLicenseActivation(DWOS.Service.Licensing.ValidateLicenseActivationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/ValidateLicenseActivation", ReplyAction="http://tempuri.org/ILicenseService/ValidateLicenseActivationResponse")]
        System.IAsyncResult BeginValidateLicenseActivation(DWOS.Service.Licensing.ValidateLicenseActivationRequest request, System.AsyncCallback callback, object asyncState);
        
        DWOS.Service.Licensing.ValidateLicenseActivationResponse EndValidateLicenseActivation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/ReloadCompanyInfo", ReplyAction="http://tempuri.org/ILicenseService/ReloadCompanyInfoResponse")]
        DWOS.Service.Licensing.ReloadCompanyInfoResponse ReloadCompanyInfo(DWOS.Service.Licensing.ReloadCompanyInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILicenseService/ReloadCompanyInfo", ReplyAction="http://tempuri.org/ILicenseService/ReloadCompanyInfoResponse")]
        System.IAsyncResult BeginReloadCompanyInfo(DWOS.Service.Licensing.ReloadCompanyInfoRequest request, System.AsyncCallback callback, object asyncState);
        
        DWOS.Service.Licensing.ReloadCompanyInfoResponse EndReloadCompanyInfo(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckOutLicense", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckOutLicenseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string computerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int userId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public System.Guid uid;
        
        public CheckOutLicenseRequest() {
        }
        
        public CheckOutLicenseRequest(string computerName, int userId, string userName, System.Guid uid) {
            this.computerName = computerName;
            this.userId = userId;
            this.userName = userName;
            this.uid = uid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckOutLicenseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckOutLicenseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CheckOutLicenseResult;
        
        public CheckOutLicenseResponse() {
        }
        
        public CheckOutLicenseResponse(bool CheckOutLicenseResult) {
            this.CheckOutLicenseResult = CheckOutLicenseResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckInLicense", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckInLicenseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid uid;
        
        public CheckInLicenseRequest() {
        }
        
        public CheckInLicenseRequest(System.Guid uid) {
            this.uid = uid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckInLicenseResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckInLicenseResponse {
        
        public CheckInLicenseResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="KeepLicenseAlive", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class KeepLicenseAliveRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid uid;
        
        public KeepLicenseAliveRequest() {
        }
        
        public KeepLicenseAliveRequest(System.Guid uid) {
            this.uid = uid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="KeepLicenseAliveResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class KeepLicenseAliveResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool KeepLicenseAliveResult;
        
        public KeepLicenseAliveResponse() {
        }
        
        public KeepLicenseAliveResponse(bool KeepLicenseAliveResult) {
            this.KeepLicenseAliveResult = KeepLicenseAliveResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLicenseSummary", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetLicenseSummaryRequest {
        
        public GetLicenseSummaryRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLicenseSummaryResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetLicenseSummaryResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public DWOS.Service.Licensing.LicenseSummary GetLicenseSummaryResult;
        
        public GetLicenseSummaryResponse() {
        }
        
        public GetLicenseSummaryResponse(DWOS.Service.Licensing.LicenseSummary GetLicenseSummaryResult) {
            this.GetLicenseSummaryResult = GetLicenseSummaryResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetApplicationInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetApplicationInfoRequest {
        
        public GetApplicationInfoRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetApplicationInfoResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetApplicationInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public DWOS.Service.Licensing.ApplicationInfo GetApplicationInfoResult;
        
        public GetApplicationInfoResponse() {
        }
        
        public GetApplicationInfoResponse(DWOS.Service.Licensing.ApplicationInfo GetApplicationInfoResult) {
            this.GetApplicationInfoResult = GetApplicationInfoResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateLicenseActivation", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateLicenseActivationRequest {
        
        public ValidateLicenseActivationRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateLicenseActivationResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidateLicenseActivationResponse {
        
        public ValidateLicenseActivationResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReloadCompanyInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ReloadCompanyInfoRequest {
        
        public ReloadCompanyInfoRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReloadCompanyInfoResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ReloadCompanyInfoResponse {
        
        public ReloadCompanyInfoResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILicenseServiceChannel : DWOS.Service.Licensing.ILicenseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckOutLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckOutLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.Service.Licensing.CheckOutLicenseResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.Service.Licensing.CheckOutLicenseResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckInLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckInLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.Service.Licensing.CheckInLicenseResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.Service.Licensing.CheckInLicenseResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KeepLicenseAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public KeepLicenseAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.Service.Licensing.KeepLicenseAliveResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.Service.Licensing.KeepLicenseAliveResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLicenseSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLicenseSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.Service.Licensing.GetLicenseSummaryResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.Service.Licensing.GetLicenseSummaryResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetApplicationInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetApplicationInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.Service.Licensing.GetApplicationInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.Service.Licensing.GetApplicationInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateLicenseActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateLicenseActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.Service.Licensing.ValidateLicenseActivationResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.Service.Licensing.ValidateLicenseActivationResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReloadCompanyInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReloadCompanyInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DWOS.Service.Licensing.ReloadCompanyInfoResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DWOS.Service.Licensing.ReloadCompanyInfoResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicenseServiceClient : System.ServiceModel.ClientBase<DWOS.Service.Licensing.ILicenseService>, DWOS.Service.Licensing.ILicenseService {
        
        private BeginOperationDelegate onBeginCheckOutLicenseDelegate;
        
        private EndOperationDelegate onEndCheckOutLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onCheckOutLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckInLicenseDelegate;
        
        private EndOperationDelegate onEndCheckInLicenseDelegate;
        
        private System.Threading.SendOrPostCallback onCheckInLicenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginKeepLicenseAliveDelegate;
        
        private EndOperationDelegate onEndKeepLicenseAliveDelegate;
        
        private System.Threading.SendOrPostCallback onKeepLicenseAliveCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLicenseSummaryDelegate;
        
        private EndOperationDelegate onEndGetLicenseSummaryDelegate;
        
        private System.Threading.SendOrPostCallback onGetLicenseSummaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetApplicationInfoDelegate;
        
        private EndOperationDelegate onEndGetApplicationInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetApplicationInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateLicenseActivationDelegate;
        
        private EndOperationDelegate onEndValidateLicenseActivationDelegate;
        
        private System.Threading.SendOrPostCallback onValidateLicenseActivationCompletedDelegate;
        
        private BeginOperationDelegate onBeginReloadCompanyInfoDelegate;
        
        private EndOperationDelegate onEndReloadCompanyInfoDelegate;
        
        private System.Threading.SendOrPostCallback onReloadCompanyInfoCompletedDelegate;
        
        public LicenseServiceClient() {
        }
        
        public LicenseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicenseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CheckOutLicenseCompletedEventArgs> CheckOutLicenseCompleted;
        
        public event System.EventHandler<CheckInLicenseCompletedEventArgs> CheckInLicenseCompleted;
        
        public event System.EventHandler<KeepLicenseAliveCompletedEventArgs> KeepLicenseAliveCompleted;
        
        public event System.EventHandler<GetLicenseSummaryCompletedEventArgs> GetLicenseSummaryCompleted;
        
        public event System.EventHandler<GetApplicationInfoCompletedEventArgs> GetApplicationInfoCompleted;
        
        public event System.EventHandler<ValidateLicenseActivationCompletedEventArgs> ValidateLicenseActivationCompleted;
        
        public event System.EventHandler<ReloadCompanyInfoCompletedEventArgs> ReloadCompanyInfoCompleted;
        
        public DWOS.Service.Licensing.CheckOutLicenseResponse CheckOutLicense(DWOS.Service.Licensing.CheckOutLicenseRequest request) {
            return base.Channel.CheckOutLicense(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckOutLicense(DWOS.Service.Licensing.CheckOutLicenseRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckOutLicense(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.Service.Licensing.CheckOutLicenseResponse EndCheckOutLicense(System.IAsyncResult result) {
            return base.Channel.EndCheckOutLicense(result);
        }
        
        private System.IAsyncResult OnBeginCheckOutLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DWOS.Service.Licensing.CheckOutLicenseRequest request = ((DWOS.Service.Licensing.CheckOutLicenseRequest)(inValues[0]));
            return this.BeginCheckOutLicense(request, callback, asyncState);
        }
        
        private object[] OnEndCheckOutLicense(System.IAsyncResult result) {
            DWOS.Service.Licensing.CheckOutLicenseResponse retVal = this.EndCheckOutLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckOutLicenseCompleted(object state) {
            if ((this.CheckOutLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckOutLicenseCompleted(this, new CheckOutLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckOutLicenseAsync(DWOS.Service.Licensing.CheckOutLicenseRequest request) {
            this.CheckOutLicenseAsync(request, null);
        }
        
        public void CheckOutLicenseAsync(DWOS.Service.Licensing.CheckOutLicenseRequest request, object userState) {
            if ((this.onBeginCheckOutLicenseDelegate == null)) {
                this.onBeginCheckOutLicenseDelegate = new BeginOperationDelegate(this.OnBeginCheckOutLicense);
            }
            if ((this.onEndCheckOutLicenseDelegate == null)) {
                this.onEndCheckOutLicenseDelegate = new EndOperationDelegate(this.OnEndCheckOutLicense);
            }
            if ((this.onCheckOutLicenseCompletedDelegate == null)) {
                this.onCheckOutLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckOutLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginCheckOutLicenseDelegate, new object[] {
                        request}, this.onEndCheckOutLicenseDelegate, this.onCheckOutLicenseCompletedDelegate, userState);
        }
        
        public DWOS.Service.Licensing.CheckInLicenseResponse CheckInLicense(DWOS.Service.Licensing.CheckInLicenseRequest request) {
            return base.Channel.CheckInLicense(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckInLicense(DWOS.Service.Licensing.CheckInLicenseRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckInLicense(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.Service.Licensing.CheckInLicenseResponse EndCheckInLicense(System.IAsyncResult result) {
            return base.Channel.EndCheckInLicense(result);
        }
        
        private System.IAsyncResult OnBeginCheckInLicense(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DWOS.Service.Licensing.CheckInLicenseRequest request = ((DWOS.Service.Licensing.CheckInLicenseRequest)(inValues[0]));
            return this.BeginCheckInLicense(request, callback, asyncState);
        }
        
        private object[] OnEndCheckInLicense(System.IAsyncResult result) {
            DWOS.Service.Licensing.CheckInLicenseResponse retVal = this.EndCheckInLicense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckInLicenseCompleted(object state) {
            if ((this.CheckInLicenseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckInLicenseCompleted(this, new CheckInLicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckInLicenseAsync(DWOS.Service.Licensing.CheckInLicenseRequest request) {
            this.CheckInLicenseAsync(request, null);
        }
        
        public void CheckInLicenseAsync(DWOS.Service.Licensing.CheckInLicenseRequest request, object userState) {
            if ((this.onBeginCheckInLicenseDelegate == null)) {
                this.onBeginCheckInLicenseDelegate = new BeginOperationDelegate(this.OnBeginCheckInLicense);
            }
            if ((this.onEndCheckInLicenseDelegate == null)) {
                this.onEndCheckInLicenseDelegate = new EndOperationDelegate(this.OnEndCheckInLicense);
            }
            if ((this.onCheckInLicenseCompletedDelegate == null)) {
                this.onCheckInLicenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckInLicenseCompleted);
            }
            base.InvokeAsync(this.onBeginCheckInLicenseDelegate, new object[] {
                        request}, this.onEndCheckInLicenseDelegate, this.onCheckInLicenseCompletedDelegate, userState);
        }
        
        public DWOS.Service.Licensing.KeepLicenseAliveResponse KeepLicenseAlive(DWOS.Service.Licensing.KeepLicenseAliveRequest request) {
            return base.Channel.KeepLicenseAlive(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginKeepLicenseAlive(DWOS.Service.Licensing.KeepLicenseAliveRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginKeepLicenseAlive(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.Service.Licensing.KeepLicenseAliveResponse EndKeepLicenseAlive(System.IAsyncResult result) {
            return base.Channel.EndKeepLicenseAlive(result);
        }
        
        private System.IAsyncResult OnBeginKeepLicenseAlive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DWOS.Service.Licensing.KeepLicenseAliveRequest request = ((DWOS.Service.Licensing.KeepLicenseAliveRequest)(inValues[0]));
            return this.BeginKeepLicenseAlive(request, callback, asyncState);
        }
        
        private object[] OnEndKeepLicenseAlive(System.IAsyncResult result) {
            DWOS.Service.Licensing.KeepLicenseAliveResponse retVal = this.EndKeepLicenseAlive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnKeepLicenseAliveCompleted(object state) {
            if ((this.KeepLicenseAliveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.KeepLicenseAliveCompleted(this, new KeepLicenseAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void KeepLicenseAliveAsync(DWOS.Service.Licensing.KeepLicenseAliveRequest request) {
            this.KeepLicenseAliveAsync(request, null);
        }
        
        public void KeepLicenseAliveAsync(DWOS.Service.Licensing.KeepLicenseAliveRequest request, object userState) {
            if ((this.onBeginKeepLicenseAliveDelegate == null)) {
                this.onBeginKeepLicenseAliveDelegate = new BeginOperationDelegate(this.OnBeginKeepLicenseAlive);
            }
            if ((this.onEndKeepLicenseAliveDelegate == null)) {
                this.onEndKeepLicenseAliveDelegate = new EndOperationDelegate(this.OnEndKeepLicenseAlive);
            }
            if ((this.onKeepLicenseAliveCompletedDelegate == null)) {
                this.onKeepLicenseAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKeepLicenseAliveCompleted);
            }
            base.InvokeAsync(this.onBeginKeepLicenseAliveDelegate, new object[] {
                        request}, this.onEndKeepLicenseAliveDelegate, this.onKeepLicenseAliveCompletedDelegate, userState);
        }
        
        public DWOS.Service.Licensing.GetLicenseSummaryResponse GetLicenseSummary(DWOS.Service.Licensing.GetLicenseSummaryRequest request) {
            return base.Channel.GetLicenseSummary(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLicenseSummary(DWOS.Service.Licensing.GetLicenseSummaryRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLicenseSummary(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.Service.Licensing.GetLicenseSummaryResponse EndGetLicenseSummary(System.IAsyncResult result) {
            return base.Channel.EndGetLicenseSummary(result);
        }
        
        private System.IAsyncResult OnBeginGetLicenseSummary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DWOS.Service.Licensing.GetLicenseSummaryRequest request = ((DWOS.Service.Licensing.GetLicenseSummaryRequest)(inValues[0]));
            return this.BeginGetLicenseSummary(request, callback, asyncState);
        }
        
        private object[] OnEndGetLicenseSummary(System.IAsyncResult result) {
            DWOS.Service.Licensing.GetLicenseSummaryResponse retVal = this.EndGetLicenseSummary(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLicenseSummaryCompleted(object state) {
            if ((this.GetLicenseSummaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLicenseSummaryCompleted(this, new GetLicenseSummaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLicenseSummaryAsync(DWOS.Service.Licensing.GetLicenseSummaryRequest request) {
            this.GetLicenseSummaryAsync(request, null);
        }
        
        public void GetLicenseSummaryAsync(DWOS.Service.Licensing.GetLicenseSummaryRequest request, object userState) {
            if ((this.onBeginGetLicenseSummaryDelegate == null)) {
                this.onBeginGetLicenseSummaryDelegate = new BeginOperationDelegate(this.OnBeginGetLicenseSummary);
            }
            if ((this.onEndGetLicenseSummaryDelegate == null)) {
                this.onEndGetLicenseSummaryDelegate = new EndOperationDelegate(this.OnEndGetLicenseSummary);
            }
            if ((this.onGetLicenseSummaryCompletedDelegate == null)) {
                this.onGetLicenseSummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLicenseSummaryCompleted);
            }
            base.InvokeAsync(this.onBeginGetLicenseSummaryDelegate, new object[] {
                        request}, this.onEndGetLicenseSummaryDelegate, this.onGetLicenseSummaryCompletedDelegate, userState);
        }
        
        public DWOS.Service.Licensing.GetApplicationInfoResponse GetApplicationInfo(DWOS.Service.Licensing.GetApplicationInfoRequest request) {
            return base.Channel.GetApplicationInfo(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetApplicationInfo(DWOS.Service.Licensing.GetApplicationInfoRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetApplicationInfo(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.Service.Licensing.GetApplicationInfoResponse EndGetApplicationInfo(System.IAsyncResult result) {
            return base.Channel.EndGetApplicationInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetApplicationInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DWOS.Service.Licensing.GetApplicationInfoRequest request = ((DWOS.Service.Licensing.GetApplicationInfoRequest)(inValues[0]));
            return this.BeginGetApplicationInfo(request, callback, asyncState);
        }
        
        private object[] OnEndGetApplicationInfo(System.IAsyncResult result) {
            DWOS.Service.Licensing.GetApplicationInfoResponse retVal = this.EndGetApplicationInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetApplicationInfoCompleted(object state) {
            if ((this.GetApplicationInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetApplicationInfoCompleted(this, new GetApplicationInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetApplicationInfoAsync(DWOS.Service.Licensing.GetApplicationInfoRequest request) {
            this.GetApplicationInfoAsync(request, null);
        }
        
        public void GetApplicationInfoAsync(DWOS.Service.Licensing.GetApplicationInfoRequest request, object userState) {
            if ((this.onBeginGetApplicationInfoDelegate == null)) {
                this.onBeginGetApplicationInfoDelegate = new BeginOperationDelegate(this.OnBeginGetApplicationInfo);
            }
            if ((this.onEndGetApplicationInfoDelegate == null)) {
                this.onEndGetApplicationInfoDelegate = new EndOperationDelegate(this.OnEndGetApplicationInfo);
            }
            if ((this.onGetApplicationInfoCompletedDelegate == null)) {
                this.onGetApplicationInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetApplicationInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetApplicationInfoDelegate, new object[] {
                        request}, this.onEndGetApplicationInfoDelegate, this.onGetApplicationInfoCompletedDelegate, userState);
        }
        
        public DWOS.Service.Licensing.ValidateLicenseActivationResponse ValidateLicenseActivation(DWOS.Service.Licensing.ValidateLicenseActivationRequest request) {
            return base.Channel.ValidateLicenseActivation(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidateLicenseActivation(DWOS.Service.Licensing.ValidateLicenseActivationRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateLicenseActivation(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.Service.Licensing.ValidateLicenseActivationResponse EndValidateLicenseActivation(System.IAsyncResult result) {
            return base.Channel.EndValidateLicenseActivation(result);
        }
        
        private System.IAsyncResult OnBeginValidateLicenseActivation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DWOS.Service.Licensing.ValidateLicenseActivationRequest request = ((DWOS.Service.Licensing.ValidateLicenseActivationRequest)(inValues[0]));
            return this.BeginValidateLicenseActivation(request, callback, asyncState);
        }
        
        private object[] OnEndValidateLicenseActivation(System.IAsyncResult result) {
            DWOS.Service.Licensing.ValidateLicenseActivationResponse retVal = this.EndValidateLicenseActivation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateLicenseActivationCompleted(object state) {
            if ((this.ValidateLicenseActivationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateLicenseActivationCompleted(this, new ValidateLicenseActivationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateLicenseActivationAsync(DWOS.Service.Licensing.ValidateLicenseActivationRequest request) {
            this.ValidateLicenseActivationAsync(request, null);
        }
        
        public void ValidateLicenseActivationAsync(DWOS.Service.Licensing.ValidateLicenseActivationRequest request, object userState) {
            if ((this.onBeginValidateLicenseActivationDelegate == null)) {
                this.onBeginValidateLicenseActivationDelegate = new BeginOperationDelegate(this.OnBeginValidateLicenseActivation);
            }
            if ((this.onEndValidateLicenseActivationDelegate == null)) {
                this.onEndValidateLicenseActivationDelegate = new EndOperationDelegate(this.OnEndValidateLicenseActivation);
            }
            if ((this.onValidateLicenseActivationCompletedDelegate == null)) {
                this.onValidateLicenseActivationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateLicenseActivationCompleted);
            }
            base.InvokeAsync(this.onBeginValidateLicenseActivationDelegate, new object[] {
                        request}, this.onEndValidateLicenseActivationDelegate, this.onValidateLicenseActivationCompletedDelegate, userState);
        }
        
        public DWOS.Service.Licensing.ReloadCompanyInfoResponse ReloadCompanyInfo(DWOS.Service.Licensing.ReloadCompanyInfoRequest request) {
            return base.Channel.ReloadCompanyInfo(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReloadCompanyInfo(DWOS.Service.Licensing.ReloadCompanyInfoRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReloadCompanyInfo(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DWOS.Service.Licensing.ReloadCompanyInfoResponse EndReloadCompanyInfo(System.IAsyncResult result) {
            return base.Channel.EndReloadCompanyInfo(result);
        }
        
        private System.IAsyncResult OnBeginReloadCompanyInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DWOS.Service.Licensing.ReloadCompanyInfoRequest request = ((DWOS.Service.Licensing.ReloadCompanyInfoRequest)(inValues[0]));
            return this.BeginReloadCompanyInfo(request, callback, asyncState);
        }
        
        private object[] OnEndReloadCompanyInfo(System.IAsyncResult result) {
            DWOS.Service.Licensing.ReloadCompanyInfoResponse retVal = this.EndReloadCompanyInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReloadCompanyInfoCompleted(object state) {
            if ((this.ReloadCompanyInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReloadCompanyInfoCompleted(this, new ReloadCompanyInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReloadCompanyInfoAsync(DWOS.Service.Licensing.ReloadCompanyInfoRequest request) {
            this.ReloadCompanyInfoAsync(request, null);
        }
        
        public void ReloadCompanyInfoAsync(DWOS.Service.Licensing.ReloadCompanyInfoRequest request, object userState) {
            if ((this.onBeginReloadCompanyInfoDelegate == null)) {
                this.onBeginReloadCompanyInfoDelegate = new BeginOperationDelegate(this.OnBeginReloadCompanyInfo);
            }
            if ((this.onEndReloadCompanyInfoDelegate == null)) {
                this.onEndReloadCompanyInfoDelegate = new EndOperationDelegate(this.OnEndReloadCompanyInfo);
            }
            if ((this.onReloadCompanyInfoCompletedDelegate == null)) {
                this.onReloadCompanyInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReloadCompanyInfoCompleted);
            }
            base.InvokeAsync(this.onBeginReloadCompanyInfoDelegate, new object[] {
                        request}, this.onEndReloadCompanyInfoDelegate, this.onReloadCompanyInfoCompletedDelegate, userState);
        }
    }
}
